/*
Technitium API

Go SDK for interacting with Technitium APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 12.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package technitium

import (
	"encoding/json"
)

// checks if the UpdateRecordResponseResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRecordResponseResponse{}

// UpdateRecordResponseResponse struct for UpdateRecordResponseResponse
type UpdateRecordResponseResponse struct {
	Zone *CreateRecordResponseResponseZone `json:"zone,omitempty"`
	UpdatedRecord *UpdateRecordResponseResponseUpdatedRecord `json:"updatedRecord,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateRecordResponseResponse UpdateRecordResponseResponse

// NewUpdateRecordResponseResponse instantiates a new UpdateRecordResponseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRecordResponseResponse() *UpdateRecordResponseResponse {
	this := UpdateRecordResponseResponse{}
	return &this
}

// NewUpdateRecordResponseResponseWithDefaults instantiates a new UpdateRecordResponseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRecordResponseResponseWithDefaults() *UpdateRecordResponseResponse {
	this := UpdateRecordResponseResponse{}
	return &this
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *UpdateRecordResponseResponse) GetZone() CreateRecordResponseResponseZone {
	if o == nil || IsNil(o.Zone) {
		var ret CreateRecordResponseResponseZone
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecordResponseResponse) GetZoneOk() (*CreateRecordResponseResponseZone, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *UpdateRecordResponseResponse) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given CreateRecordResponseResponseZone and assigns it to the Zone field.
func (o *UpdateRecordResponseResponse) SetZone(v CreateRecordResponseResponseZone) {
	o.Zone = &v
}

// GetUpdatedRecord returns the UpdatedRecord field value if set, zero value otherwise.
func (o *UpdateRecordResponseResponse) GetUpdatedRecord() UpdateRecordResponseResponseUpdatedRecord {
	if o == nil || IsNil(o.UpdatedRecord) {
		var ret UpdateRecordResponseResponseUpdatedRecord
		return ret
	}
	return *o.UpdatedRecord
}

// GetUpdatedRecordOk returns a tuple with the UpdatedRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecordResponseResponse) GetUpdatedRecordOk() (*UpdateRecordResponseResponseUpdatedRecord, bool) {
	if o == nil || IsNil(o.UpdatedRecord) {
		return nil, false
	}
	return o.UpdatedRecord, true
}

// HasUpdatedRecord returns a boolean if a field has been set.
func (o *UpdateRecordResponseResponse) HasUpdatedRecord() bool {
	if o != nil && !IsNil(o.UpdatedRecord) {
		return true
	}

	return false
}

// SetUpdatedRecord gets a reference to the given UpdateRecordResponseResponseUpdatedRecord and assigns it to the UpdatedRecord field.
func (o *UpdateRecordResponseResponse) SetUpdatedRecord(v UpdateRecordResponseResponseUpdatedRecord) {
	o.UpdatedRecord = &v
}

func (o UpdateRecordResponseResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRecordResponseResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	if !IsNil(o.UpdatedRecord) {
		toSerialize["updatedRecord"] = o.UpdatedRecord
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateRecordResponseResponse) UnmarshalJSON(data []byte) (err error) {
	varUpdateRecordResponseResponse := _UpdateRecordResponseResponse{}

	err = json.Unmarshal(data, &varUpdateRecordResponseResponse)

	if err != nil {
		return err
	}

	*o = UpdateRecordResponseResponse(varUpdateRecordResponseResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "zone")
		delete(additionalProperties, "updatedRecord")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateRecordResponseResponse struct {
	value *UpdateRecordResponseResponse
	isSet bool
}

func (v NullableUpdateRecordResponseResponse) Get() *UpdateRecordResponseResponse {
	return v.value
}

func (v *NullableUpdateRecordResponseResponse) Set(val *UpdateRecordResponseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRecordResponseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRecordResponseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRecordResponseResponse(val *UpdateRecordResponseResponse) *NullableUpdateRecordResponseResponse {
	return &NullableUpdateRecordResponseResponse{value: val, isSet: true}
}

func (v NullableUpdateRecordResponseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRecordResponseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


