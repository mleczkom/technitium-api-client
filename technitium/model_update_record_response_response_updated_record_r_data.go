/*
Technitium API

Go SDK for interacting with Technitium APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 12.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package technitium

import (
	"encoding/json"
)

// checks if the UpdateRecordResponseResponseUpdatedRecordRData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRecordResponseResponseUpdatedRecordRData{}

// UpdateRecordResponseResponseUpdatedRecordRData struct for UpdateRecordResponseResponseUpdatedRecordRData
type UpdateRecordResponseResponseUpdatedRecordRData struct {
	PrimaryNameServer *string `json:"primaryNameServer,omitempty"`
	ResponsiblePerson *string `json:"responsiblePerson,omitempty"`
	Serial *int32 `json:"serial,omitempty"`
	Refresh *int32 `json:"refresh,omitempty"`
	Retry *int32 `json:"retry,omitempty"`
	Expire *int32 `json:"expire,omitempty"`
	Minimum *int32 `json:"minimum,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateRecordResponseResponseUpdatedRecordRData UpdateRecordResponseResponseUpdatedRecordRData

// NewUpdateRecordResponseResponseUpdatedRecordRData instantiates a new UpdateRecordResponseResponseUpdatedRecordRData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRecordResponseResponseUpdatedRecordRData() *UpdateRecordResponseResponseUpdatedRecordRData {
	this := UpdateRecordResponseResponseUpdatedRecordRData{}
	return &this
}

// NewUpdateRecordResponseResponseUpdatedRecordRDataWithDefaults instantiates a new UpdateRecordResponseResponseUpdatedRecordRData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRecordResponseResponseUpdatedRecordRDataWithDefaults() *UpdateRecordResponseResponseUpdatedRecordRData {
	this := UpdateRecordResponseResponseUpdatedRecordRData{}
	return &this
}

// GetPrimaryNameServer returns the PrimaryNameServer field value if set, zero value otherwise.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetPrimaryNameServer() string {
	if o == nil || IsNil(o.PrimaryNameServer) {
		var ret string
		return ret
	}
	return *o.PrimaryNameServer
}

// GetPrimaryNameServerOk returns a tuple with the PrimaryNameServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetPrimaryNameServerOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryNameServer) {
		return nil, false
	}
	return o.PrimaryNameServer, true
}

// HasPrimaryNameServer returns a boolean if a field has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) HasPrimaryNameServer() bool {
	if o != nil && !IsNil(o.PrimaryNameServer) {
		return true
	}

	return false
}

// SetPrimaryNameServer gets a reference to the given string and assigns it to the PrimaryNameServer field.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) SetPrimaryNameServer(v string) {
	o.PrimaryNameServer = &v
}

// GetResponsiblePerson returns the ResponsiblePerson field value if set, zero value otherwise.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetResponsiblePerson() string {
	if o == nil || IsNil(o.ResponsiblePerson) {
		var ret string
		return ret
	}
	return *o.ResponsiblePerson
}

// GetResponsiblePersonOk returns a tuple with the ResponsiblePerson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetResponsiblePersonOk() (*string, bool) {
	if o == nil || IsNil(o.ResponsiblePerson) {
		return nil, false
	}
	return o.ResponsiblePerson, true
}

// HasResponsiblePerson returns a boolean if a field has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) HasResponsiblePerson() bool {
	if o != nil && !IsNil(o.ResponsiblePerson) {
		return true
	}

	return false
}

// SetResponsiblePerson gets a reference to the given string and assigns it to the ResponsiblePerson field.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) SetResponsiblePerson(v string) {
	o.ResponsiblePerson = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetSerial() int32 {
	if o == nil || IsNil(o.Serial) {
		var ret int32
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetSerialOk() (*int32, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given int32 and assigns it to the Serial field.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) SetSerial(v int32) {
	o.Serial = &v
}

// GetRefresh returns the Refresh field value if set, zero value otherwise.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetRefresh() int32 {
	if o == nil || IsNil(o.Refresh) {
		var ret int32
		return ret
	}
	return *o.Refresh
}

// GetRefreshOk returns a tuple with the Refresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetRefreshOk() (*int32, bool) {
	if o == nil || IsNil(o.Refresh) {
		return nil, false
	}
	return o.Refresh, true
}

// HasRefresh returns a boolean if a field has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) HasRefresh() bool {
	if o != nil && !IsNil(o.Refresh) {
		return true
	}

	return false
}

// SetRefresh gets a reference to the given int32 and assigns it to the Refresh field.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) SetRefresh(v int32) {
	o.Refresh = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetRetry() int32 {
	if o == nil || IsNil(o.Retry) {
		var ret int32
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetRetryOk() (*int32, bool) {
	if o == nil || IsNil(o.Retry) {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) HasRetry() bool {
	if o != nil && !IsNil(o.Retry) {
		return true
	}

	return false
}

// SetRetry gets a reference to the given int32 and assigns it to the Retry field.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) SetRetry(v int32) {
	o.Retry = &v
}

// GetExpire returns the Expire field value if set, zero value otherwise.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetExpire() int32 {
	if o == nil || IsNil(o.Expire) {
		var ret int32
		return ret
	}
	return *o.Expire
}

// GetExpireOk returns a tuple with the Expire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetExpireOk() (*int32, bool) {
	if o == nil || IsNil(o.Expire) {
		return nil, false
	}
	return o.Expire, true
}

// HasExpire returns a boolean if a field has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) HasExpire() bool {
	if o != nil && !IsNil(o.Expire) {
		return true
	}

	return false
}

// SetExpire gets a reference to the given int32 and assigns it to the Expire field.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) SetExpire(v int32) {
	o.Expire = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetMinimum() int32 {
	if o == nil || IsNil(o.Minimum) {
		var ret int32
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) GetMinimumOk() (*int32, bool) {
	if o == nil || IsNil(o.Minimum) {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) HasMinimum() bool {
	if o != nil && !IsNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given int32 and assigns it to the Minimum field.
func (o *UpdateRecordResponseResponseUpdatedRecordRData) SetMinimum(v int32) {
	o.Minimum = &v
}

func (o UpdateRecordResponseResponseUpdatedRecordRData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRecordResponseResponseUpdatedRecordRData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrimaryNameServer) {
		toSerialize["primaryNameServer"] = o.PrimaryNameServer
	}
	if !IsNil(o.ResponsiblePerson) {
		toSerialize["responsiblePerson"] = o.ResponsiblePerson
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.Refresh) {
		toSerialize["refresh"] = o.Refresh
	}
	if !IsNil(o.Retry) {
		toSerialize["retry"] = o.Retry
	}
	if !IsNil(o.Expire) {
		toSerialize["expire"] = o.Expire
	}
	if !IsNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateRecordResponseResponseUpdatedRecordRData) UnmarshalJSON(data []byte) (err error) {
	varUpdateRecordResponseResponseUpdatedRecordRData := _UpdateRecordResponseResponseUpdatedRecordRData{}

	err = json.Unmarshal(data, &varUpdateRecordResponseResponseUpdatedRecordRData)

	if err != nil {
		return err
	}

	*o = UpdateRecordResponseResponseUpdatedRecordRData(varUpdateRecordResponseResponseUpdatedRecordRData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "primaryNameServer")
		delete(additionalProperties, "responsiblePerson")
		delete(additionalProperties, "serial")
		delete(additionalProperties, "refresh")
		delete(additionalProperties, "retry")
		delete(additionalProperties, "expire")
		delete(additionalProperties, "minimum")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateRecordResponseResponseUpdatedRecordRData struct {
	value *UpdateRecordResponseResponseUpdatedRecordRData
	isSet bool
}

func (v NullableUpdateRecordResponseResponseUpdatedRecordRData) Get() *UpdateRecordResponseResponseUpdatedRecordRData {
	return v.value
}

func (v *NullableUpdateRecordResponseResponseUpdatedRecordRData) Set(val *UpdateRecordResponseResponseUpdatedRecordRData) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRecordResponseResponseUpdatedRecordRData) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRecordResponseResponseUpdatedRecordRData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRecordResponseResponseUpdatedRecordRData(val *UpdateRecordResponseResponseUpdatedRecordRData) *NullableUpdateRecordResponseResponseUpdatedRecordRData {
	return &NullableUpdateRecordResponseResponseUpdatedRecordRData{value: val, isSet: true}
}

func (v NullableUpdateRecordResponseResponseUpdatedRecordRData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRecordResponseResponseUpdatedRecordRData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


