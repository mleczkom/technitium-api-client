/*
Technitium API

Go SDK for interacting with Technitium APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 12.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package technitium

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// DnsRecordAPIService DnsRecordAPI service
type DnsRecordAPIService service

type ApiCreateDnsRecordRequest struct {
	ctx context.Context
	ApiService *DnsRecordAPIService
	domain *string
	zone *string
	type_ *string
	ttl *int32
	overwrite *bool
	comments *string
	ipAddress *string
	ptr *bool
	createPtrZone *bool
	updateSvcbHints *bool
	nameServer *string
	glue *string
	cname *string
	ptrName *string
	exchange *string
	preference *string
	text *string
	splitText *bool
	priority *int32
	weight *int32
	port *int32
	target *string
	naptrOrder *int32
	naptrPreference *int32
	naptrFlags *string
	naptrServices *string
	naptrRegexp *string
	naptrReplacement *string
	dname *string
	keyTag *string
	algorithm *string
	digestType *string
	digest *string
	sshfpAlgorithm *string
	sshfpFingerprintType *string
	sshfpFingerprint *string
	tlsaCertificateUsage *string
	tlsaSelector *string
	tlsaMatchingType *string
	tlsaCertificateAssociationData *string
	svcPriority *string
	svcTargetName *string
	svcParams *string
	autoIpv4Hint *bool
	autoIpv6Hint *bool
	uriPriority *int32
	uriWeight *int32
	uri *string
	flags *int32
	tag *string
	value *string
	aname *string
	protocol *string
	forwarder *string
	dnssecValidation *bool
	proxyType *string
	proxyAddress *string
	proxyPort *string
	proxyUsername *string
	proxyPassword *string
	appName *string
	classPath *string
	recordData *string
	rdata *string
}

// The domain name of the zone to add record
func (r ApiCreateDnsRecordRequest) Domain(domain string) ApiCreateDnsRecordRequest {
	r.domain = &domain
	return r
}

// The name of the authoritative zone into which the domain exists. When unspecified, the closest authoritative zone will be used. 
func (r ApiCreateDnsRecordRequest) Zone(zone string) ApiCreateDnsRecordRequest {
	r.zone = &zone
	return r
}

// he DNS resource record type. Supported record types are [A, AAAA, NS, CNAME, PTR, MX, TXT, SRV, DNAME, DS, SSHFP, TLSA, SVCB, HTTPS, URI, CAA] and proprietary types [ANAME, FWD, APP].  Unknown record types are also supported since v11.2. 
func (r ApiCreateDnsRecordRequest) Type_(type_ string) ApiCreateDnsRecordRequest {
	r.type_ = &type_
	return r
}

// The DNS resource record TTL value. This is the value in seconds that the DNS resolvers can cache the record for. When not specified the default TTL value from settings will be used 
func (r ApiCreateDnsRecordRequest) Ttl(ttl int32) ApiCreateDnsRecordRequest {
	r.ttl = &ttl
	return r
}

// This option when set to true will overwrite existing resource record set for the selected type with the new record. Default value of false will add the new record into existing resource record set. 
func (r ApiCreateDnsRecordRequest) Overwrite(overwrite bool) ApiCreateDnsRecordRequest {
	r.overwrite = &overwrite
	return r
}

// Sets comments for the added resource record
func (r ApiCreateDnsRecordRequest) Comments(comments string) ApiCreateDnsRecordRequest {
	r.comments = &comments
	return r
}

// The IP address for adding A or AAAA record. A special value of request-ip-address  can be used to set the record with the IP address of the API HTTP request to help with  dynamic DNS update applications. This option is required and used only for A and AAAA records. 
func (r ApiCreateDnsRecordRequest) IpAddress(ipAddress string) ApiCreateDnsRecordRequest {
	r.ipAddress = &ipAddress
	return r
}

// Set this option to true to add a reverse PTR record for the IP address in the A or AAAA record. This option is used only for A and AAAA records 
func (r ApiCreateDnsRecordRequest) Ptr(ptr bool) ApiCreateDnsRecordRequest {
	r.ptr = &ptr
	return r
}

// Set this option to true to create a reverse zone for PTR record. This option is used for A and AAAA records 
func (r ApiCreateDnsRecordRequest) CreatePtrZone(createPtrZone bool) ApiCreateDnsRecordRequest {
	r.createPtrZone = &createPtrZone
	return r
}

// Set this option to true to update any SVCB/HTTPS records in the zone that has Automatic Hints option enabled  and matches its target name with the current record&#39;s domain name. This option is used for A and AAAA records 
func (r ApiCreateDnsRecordRequest) UpdateSvcbHints(updateSvcbHints bool) ApiCreateDnsRecordRequest {
	r.updateSvcbHints = &updateSvcbHints
	return r
}

// The name server domain name. This option is required for adding NS record. 
func (r ApiCreateDnsRecordRequest) NameServer(nameServer string) ApiCreateDnsRecordRequest {
	r.nameServer = &nameServer
	return r
}

// This is the glue address for the name server in the NS record. This optional  parameter is used for adding NS record 
func (r ApiCreateDnsRecordRequest) Glue(glue string) ApiCreateDnsRecordRequest {
	r.glue = &glue
	return r
}

// The CNAME domain name. This option is required for adding CNAME record. 
func (r ApiCreateDnsRecordRequest) Cname(cname string) ApiCreateDnsRecordRequest {
	r.cname = &cname
	return r
}

// The PTR domain name. This option is required for adding PTR record. 
func (r ApiCreateDnsRecordRequest) PtrName(ptrName string) ApiCreateDnsRecordRequest {
	r.ptrName = &ptrName
	return r
}

// The exchange domain name. This option is required for adding MX record 
func (r ApiCreateDnsRecordRequest) Exchange(exchange string) ApiCreateDnsRecordRequest {
	r.exchange = &exchange
	return r
}

// This is the preference value for MX record type. This option is required for adding MX record 
func (r ApiCreateDnsRecordRequest) Preference(preference string) ApiCreateDnsRecordRequest {
	r.preference = &preference
	return r
}

// The text data for TXT record. This option is required for adding TXT record 
func (r ApiCreateDnsRecordRequest) Text(text string) ApiCreateDnsRecordRequest {
	r.text = &text
	return r
}

// Set to true for using new line char to split text into multiple character-strings for adding TXT record. 
func (r ApiCreateDnsRecordRequest) SplitText(splitText bool) ApiCreateDnsRecordRequest {
	r.splitText = &splitText
	return r
}

// This parameter is required for adding the SRV record 
func (r ApiCreateDnsRecordRequest) Priority(priority int32) ApiCreateDnsRecordRequest {
	r.priority = &priority
	return r
}

// This parameter is required for adding the SRV record 
func (r ApiCreateDnsRecordRequest) Weight(weight int32) ApiCreateDnsRecordRequest {
	r.weight = &weight
	return r
}

// This parameter is required for adding the SRV record 
func (r ApiCreateDnsRecordRequest) Port(port int32) ApiCreateDnsRecordRequest {
	r.port = &port
	return r
}

// This parameter is required for adding the SRV record 
func (r ApiCreateDnsRecordRequest) Target(target string) ApiCreateDnsRecordRequest {
	r.target = &target
	return r
}

// This parameter is required for adding the NAPTR record 
func (r ApiCreateDnsRecordRequest) NaptrOrder(naptrOrder int32) ApiCreateDnsRecordRequest {
	r.naptrOrder = &naptrOrder
	return r
}

// This parameter is required for adding the NAPTR record 
func (r ApiCreateDnsRecordRequest) NaptrPreference(naptrPreference int32) ApiCreateDnsRecordRequest {
	r.naptrPreference = &naptrPreference
	return r
}

// This parameter is required for adding the NAPTR record 
func (r ApiCreateDnsRecordRequest) NaptrFlags(naptrFlags string) ApiCreateDnsRecordRequest {
	r.naptrFlags = &naptrFlags
	return r
}

// This parameter is required for adding the NAPTR record 
func (r ApiCreateDnsRecordRequest) NaptrServices(naptrServices string) ApiCreateDnsRecordRequest {
	r.naptrServices = &naptrServices
	return r
}

// This parameter is required for adding the NAPTR record 
func (r ApiCreateDnsRecordRequest) NaptrRegexp(naptrRegexp string) ApiCreateDnsRecordRequest {
	r.naptrRegexp = &naptrRegexp
	return r
}

// This parameter is required for adding the NAPTR record 
func (r ApiCreateDnsRecordRequest) NaptrReplacement(naptrReplacement string) ApiCreateDnsRecordRequest {
	r.naptrReplacement = &naptrReplacement
	return r
}

// The DNAME domain name. This option is required for adding DNAME record 
func (r ApiCreateDnsRecordRequest) Dname(dname string) ApiCreateDnsRecordRequest {
	r.dname = &dname
	return r
}

// This parameter is required for adding DS record 
func (r ApiCreateDnsRecordRequest) KeyTag(keyTag string) ApiCreateDnsRecordRequest {
	r.keyTag = &keyTag
	return r
}

// Valid values are [RSAMD5, DSA, RSASHA1, DSA-NSEC3-SHA1, RSASHA1-NSEC3-SHA1, RSASHA256, RSASHA512, ECC-GOST, ECDSAP256SHA256, ECDSAP384SHA384, ED25519, ED448]. This parameter is required for adding DS record. 
func (r ApiCreateDnsRecordRequest) Algorithm(algorithm string) ApiCreateDnsRecordRequest {
	r.algorithm = &algorithm
	return r
}

// Valid values are [SHA1, SHA256, GOST-R-34-11-94, SHA384]. This parameter is required for adding DS record 
func (r ApiCreateDnsRecordRequest) DigestType(digestType string) ApiCreateDnsRecordRequest {
	r.digestType = &digestType
	return r
}

// A hex string value. This parameter is required for adding DS record 
func (r ApiCreateDnsRecordRequest) Digest(digest string) ApiCreateDnsRecordRequest {
	r.digest = &digest
	return r
}

// Valid values are [RSA, DSA, ECDSA, Ed25519, Ed448]. This parameter is required for adding SSHFP record. 
func (r ApiCreateDnsRecordRequest) SshfpAlgorithm(sshfpAlgorithm string) ApiCreateDnsRecordRequest {
	r.sshfpAlgorithm = &sshfpAlgorithm
	return r
}

// Valid values are [SHA1, SHA256]. This parameter is required for adding SSHFP record. 
func (r ApiCreateDnsRecordRequest) SshfpFingerprintType(sshfpFingerprintType string) ApiCreateDnsRecordRequest {
	r.sshfpFingerprintType = &sshfpFingerprintType
	return r
}

// A hex string value. This parameter is required for adding SSHFP record 
func (r ApiCreateDnsRecordRequest) SshfpFingerprint(sshfpFingerprint string) ApiCreateDnsRecordRequest {
	r.sshfpFingerprint = &sshfpFingerprint
	return r
}

// Valid values are [PKIX-TA, PKIX-EE, DANE-TA, DANE-EE]. This parameter is required for adding TLSA record 
func (r ApiCreateDnsRecordRequest) TlsaCertificateUsage(tlsaCertificateUsage string) ApiCreateDnsRecordRequest {
	r.tlsaCertificateUsage = &tlsaCertificateUsage
	return r
}

// Valid values are [Cert, SPKI]. This parameter is required for adding TLSA record 
func (r ApiCreateDnsRecordRequest) TlsaSelector(tlsaSelector string) ApiCreateDnsRecordRequest {
	r.tlsaSelector = &tlsaSelector
	return r
}

// Valid value are [Full, SHA2-256, SHA2-512]. This parameter is required for adding TLSA record 
func (r ApiCreateDnsRecordRequest) TlsaMatchingType(tlsaMatchingType string) ApiCreateDnsRecordRequest {
	r.tlsaMatchingType = &tlsaMatchingType
	return r
}

// A X509 certificate in PEM format or a hex string value. This parameter  is required for adding TLSA record 
func (r ApiCreateDnsRecordRequest) TlsaCertificateAssociationData(tlsaCertificateAssociationData string) ApiCreateDnsRecordRequest {
	r.tlsaCertificateAssociationData = &tlsaCertificateAssociationData
	return r
}

// The priority value for SVCB or HTTPS record. This parameter is required for adding SCVB or HTTPS record 
func (r ApiCreateDnsRecordRequest) SvcPriority(svcPriority string) ApiCreateDnsRecordRequest {
	r.svcPriority = &svcPriority
	return r
}

// The target domain name for SVCB or HTTPS record. This parameter is required for adding SCVB or HTTPS record 
func (r ApiCreateDnsRecordRequest) SvcTargetName(svcTargetName string) ApiCreateDnsRecordRequest {
	r.svcTargetName = &svcTargetName
	return r
}

// The service parameters for SVCB or HTTPS record which is a pipe separated list of key and value. For example, alpn|h2,h3|port|53443. To clear existing values, set it to false. This parameter is required for adding SCVB or HTTPS record 
func (r ApiCreateDnsRecordRequest) SvcParams(svcParams string) ApiCreateDnsRecordRequest {
	r.svcParams = &svcParams
	return r
}

// Set this option to true to enable Automatic Hints for the ipv4hint parameter in the svcParams. This option is valid only for SVCB and HTTPS records 
func (r ApiCreateDnsRecordRequest) AutoIpv4Hint(autoIpv4Hint bool) ApiCreateDnsRecordRequest {
	r.autoIpv4Hint = &autoIpv4Hint
	return r
}

// Set this option to true to enable Automatic Hints for the ipv6hint parameter in the svcParams. This option is valid only for SVCB and HTTPS records. 
func (r ApiCreateDnsRecordRequest) AutoIpv6Hint(autoIpv6Hint bool) ApiCreateDnsRecordRequest {
	r.autoIpv6Hint = &autoIpv6Hint
	return r
}

// The priority value for adding the URI record 
func (r ApiCreateDnsRecordRequest) UriPriority(uriPriority int32) ApiCreateDnsRecordRequest {
	r.uriPriority = &uriPriority
	return r
}

// The weight value for adding the URI record 
func (r ApiCreateDnsRecordRequest) UriWeight(uriWeight int32) ApiCreateDnsRecordRequest {
	r.uriWeight = &uriWeight
	return r
}

// The URI value for adding the URI record 
func (r ApiCreateDnsRecordRequest) Uri(uri string) ApiCreateDnsRecordRequest {
	r.uri = &uri
	return r
}

// This parameter is required for adding the CAA record 
func (r ApiCreateDnsRecordRequest) Flags(flags int32) ApiCreateDnsRecordRequest {
	r.flags = &flags
	return r
}

// This parameter is required for adding the CAA record 
func (r ApiCreateDnsRecordRequest) Tag(tag string) ApiCreateDnsRecordRequest {
	r.tag = &tag
	return r
}

// This parameter is required for adding the CAA record 
func (r ApiCreateDnsRecordRequest) Value(value string) ApiCreateDnsRecordRequest {
	r.value = &value
	return r
}

// The ANAME domain name. This option is required for adding ANAME record 
func (r ApiCreateDnsRecordRequest) Aname(aname string) ApiCreateDnsRecordRequest {
	r.aname = &aname
	return r
}

// This parameter is required for adding the FWD record. Valid values are [Udp, Tcp, Tls, Https, Quic] 
func (r ApiCreateDnsRecordRequest) Protocol(protocol string) ApiCreateDnsRecordRequest {
	r.protocol = &protocol
	return r
}

// The forwarder address. A special value of this-server can be used to directly forward requests internally to the DNS server. This parameter is required for adding the FWD record 
func (r ApiCreateDnsRecordRequest) Forwarder(forwarder string) ApiCreateDnsRecordRequest {
	r.forwarder = &forwarder
	return r
}

// Set this boolean value to indicate if DNSSEC validation must be done. This optional parameter is to be used with FWD records. Default value is false 
func (r ApiCreateDnsRecordRequest) DnssecValidation(dnssecValidation bool) ApiCreateDnsRecordRequest {
	r.dnssecValidation = &dnssecValidation
	return r
}

// The type of proxy that must be used for conditional forwarding. This optional parameter is to be used with FWD records. Valid values are [NoProxy, DefaultProxy, Http, Socks5]. Default value  DefaultProxy is used when this parameter is missing 
func (r ApiCreateDnsRecordRequest) ProxyType(proxyType string) ApiCreateDnsRecordRequest {
	r.proxyType = &proxyType
	return r
}

// The proxy server address to use when proxyType is configured. This optional parameter is  to be used with FWD records 
func (r ApiCreateDnsRecordRequest) ProxyAddress(proxyAddress string) ApiCreateDnsRecordRequest {
	r.proxyAddress = &proxyAddress
	return r
}

// The proxy server port to use when proxyType is configured. This optional parameter is to be used with FWD records 
func (r ApiCreateDnsRecordRequest) ProxyPort(proxyPort string) ApiCreateDnsRecordRequest {
	r.proxyPort = &proxyPort
	return r
}

// The proxy server username to use when proxyType is configured. This optional parameter is to be used with FWD records 
func (r ApiCreateDnsRecordRequest) ProxyUsername(proxyUsername string) ApiCreateDnsRecordRequest {
	r.proxyUsername = &proxyUsername
	return r
}

// The proxy server password to use when proxyType is configured. This optional parameter is to be used with FWD records. 
func (r ApiCreateDnsRecordRequest) ProxyPassword(proxyPassword string) ApiCreateDnsRecordRequest {
	r.proxyPassword = &proxyPassword
	return r
}

// The name of the DNS app. This parameter is required for adding the APP record 
func (r ApiCreateDnsRecordRequest) AppName(appName string) ApiCreateDnsRecordRequest {
	r.appName = &appName
	return r
}

// This parameter is required for adding the APP record 
func (r ApiCreateDnsRecordRequest) ClassPath(classPath string) ApiCreateDnsRecordRequest {
	r.classPath = &classPath
	return r
}

// This parameter is used for adding the APP record as per the DNS app requirements 
func (r ApiCreateDnsRecordRequest) RecordData(recordData string) ApiCreateDnsRecordRequest {
	r.recordData = &recordData
	return r
}

// This parameter is used for adding unknown i.e. unsupported record types. The value must be formatted as a hex string or a colon separated hex string. 
func (r ApiCreateDnsRecordRequest) Rdata(rdata string) ApiCreateDnsRecordRequest {
	r.rdata = &rdata
	return r
}

func (r ApiCreateDnsRecordRequest) Execute() (*CreateRecordResponse, *http.Response, error) {
	return r.ApiService.CreateDnsRecordExecute(r)
}

/*
CreateDnsRecord Adds an resource record for an authoritative zone

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDnsRecordRequest
*/
func (a *DnsRecordAPIService) CreateDnsRecord(ctx context.Context) ApiCreateDnsRecordRequest {
	return ApiCreateDnsRecordRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateRecordResponse
func (a *DnsRecordAPIService) CreateDnsRecordExecute(r ApiCreateDnsRecordRequest) (*CreateRecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateRecordResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DnsRecordAPIService.CreateDnsRecord")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/zones/records/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.domain == nil {
		return localVarReturnValue, nil, reportError("domain is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "domain", r.domain, "form", "")
	if r.zone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zone", r.zone, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.ttl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ttl", r.ttl, "form", "")
	}
	if r.overwrite != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "overwrite", r.overwrite, "form", "")
	}
	if r.comments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments", r.comments, "form", "")
	}
	if r.ipAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ipAddress", r.ipAddress, "form", "")
	}
	if r.ptr != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ptr", r.ptr, "form", "")
	}
	if r.createPtrZone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createPtrZone", r.createPtrZone, "form", "")
	}
	if r.updateSvcbHints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updateSvcbHints", r.updateSvcbHints, "form", "")
	}
	if r.nameServer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameServer", r.nameServer, "form", "")
	}
	if r.glue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "glue", r.glue, "form", "")
	}
	if r.cname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cname", r.cname, "form", "")
	}
	if r.ptrName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ptrName", r.ptrName, "form", "")
	}
	if r.exchange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exchange", r.exchange, "form", "")
	}
	if r.preference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preference", r.preference, "form", "")
	}
	if r.text != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "form", "")
	}
	if r.splitText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "splitText", r.splitText, "form", "")
	}
	if r.priority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priority", r.priority, "form", "")
	}
	if r.weight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight", r.weight, "form", "")
	}
	if r.port != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "port", r.port, "form", "")
	}
	if r.target != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target", r.target, "form", "")
	}
	if r.naptrOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrOrder", r.naptrOrder, "form", "")
	}
	if r.naptrPreference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrPreference", r.naptrPreference, "form", "")
	}
	if r.naptrFlags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrFlags", r.naptrFlags, "form", "")
	}
	if r.naptrServices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrServices", r.naptrServices, "form", "")
	}
	if r.naptrRegexp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrRegexp", r.naptrRegexp, "form", "")
	}
	if r.naptrReplacement != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrReplacement", r.naptrReplacement, "form", "")
	}
	if r.dname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dname", r.dname, "form", "")
	}
	if r.keyTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyTag", r.keyTag, "form", "")
	}
	if r.algorithm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "algorithm", r.algorithm, "form", "")
	}
	if r.digestType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "digestType", r.digestType, "form", "")
	}
	if r.digest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "digest", r.digest, "form", "")
	}
	if r.sshfpAlgorithm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sshfpAlgorithm", r.sshfpAlgorithm, "form", "")
	}
	if r.sshfpFingerprintType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sshfpFingerprintType", r.sshfpFingerprintType, "form", "")
	}
	if r.sshfpFingerprint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sshfpFingerprint", r.sshfpFingerprint, "form", "")
	}
	if r.tlsaCertificateUsage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tlsaCertificateUsage", r.tlsaCertificateUsage, "form", "")
	}
	if r.tlsaSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tlsaSelector", r.tlsaSelector, "form", "")
	}
	if r.tlsaMatchingType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tlsaMatchingType", r.tlsaMatchingType, "form", "")
	}
	if r.tlsaCertificateAssociationData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tlsaCertificateAssociationData", r.tlsaCertificateAssociationData, "form", "")
	}
	if r.svcPriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "svcPriority", r.svcPriority, "form", "")
	}
	if r.svcTargetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "svcTargetName", r.svcTargetName, "form", "")
	}
	if r.svcParams != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "svcParams", r.svcParams, "form", "")
	}
	if r.autoIpv4Hint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoIpv4Hint", r.autoIpv4Hint, "form", "")
	}
	if r.autoIpv6Hint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoIpv6Hint", r.autoIpv6Hint, "form", "")
	}
	if r.uriPriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uriPriority", r.uriPriority, "form", "")
	}
	if r.uriWeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uriWeight", r.uriWeight, "form", "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "form", "")
	}
	if r.flags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flags", r.flags, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "form", "")
	}
	if r.aname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aname", r.aname, "form", "")
	}
	if r.protocol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "protocol", r.protocol, "form", "")
	}
	if r.forwarder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "forwarder", r.forwarder, "form", "")
	}
	if r.dnssecValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dnssecValidation", r.dnssecValidation, "form", "")
	}
	if r.proxyType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proxyType", r.proxyType, "form", "")
	}
	if r.proxyAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proxyAddress", r.proxyAddress, "form", "")
	}
	if r.proxyPort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proxyPort", r.proxyPort, "form", "")
	}
	if r.proxyUsername != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proxyUsername", r.proxyUsername, "form", "")
	}
	if r.proxyPassword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proxyPassword", r.proxyPassword, "form", "")
	}
	if r.appName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appName", r.appName, "form", "")
	}
	if r.classPath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "classPath", r.classPath, "form", "")
	}
	if r.recordData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recordData", r.recordData, "form", "")
	}
	if r.rdata != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rdata", r.rdata, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDnsRecordRequest struct {
	ctx context.Context
	ApiService *DnsRecordAPIService
	domain *string
	zone *string
	type_ *string
	ipAddress *string
	updateSvcbHints *bool
	nameServer *string
	ptrName *string
	preference *string
	exchange *string
	text *string
	splitText *bool
	priority *int32
	weight *int32
	port *int32
	target *string
	naptrOrder *int32
	naptrPreference *int32
	naptrFlags *string
	naptrServices *string
	naptrRegexp *string
	naptrReplacement *string
	keyTag *string
	algorithm *string
	digestType *string
	digest *string
	sshfpAlgorithm *string
	sshfpFingerprintType *string
	sshfpFingerprint *string
	tlsaCertificateUsage *string
	tlsaSelector *string
	tlsaMatchingType *string
	tlsaCertificateAssociationData *string
	svcPriority *string
	svcTargetName *string
	svcParams *string
	uriPriority *int32
	uriWeight *int32
	uri *string
	flags *int32
	tag *string
	value *string
	aname *string
	protocol *string
	forwarder *string
	rdata *string
}

// The domain name of the zone to delete the record
func (r ApiDeleteDnsRecordRequest) Domain(domain string) ApiDeleteDnsRecordRequest {
	r.domain = &domain
	return r
}

// The name of the authoritative zone into which the domain exists. When unspecified, the closest authoritative zone will be used 
func (r ApiDeleteDnsRecordRequest) Zone(zone string) ApiDeleteDnsRecordRequest {
	r.zone = &zone
	return r
}

// The type of the resource record to delete 
func (r ApiDeleteDnsRecordRequest) Type_(type_ string) ApiDeleteDnsRecordRequest {
	r.type_ = &type_
	return r
}

// This parameter is required when deleting A or AAAA record 
func (r ApiDeleteDnsRecordRequest) IpAddress(ipAddress string) ApiDeleteDnsRecordRequest {
	r.ipAddress = &ipAddress
	return r
}

// Set this option to true to update any SVCB/HTTPS records in the zone that has Automatic Hints option enabled and matches its target name with the current record&#39;s domain name. This option is used for A and AAAA records. 
func (r ApiDeleteDnsRecordRequest) UpdateSvcbHints(updateSvcbHints bool) ApiDeleteDnsRecordRequest {
	r.updateSvcbHints = &updateSvcbHints
	return r
}

// This parameter is required when deleting NS record 
func (r ApiDeleteDnsRecordRequest) NameServer(nameServer string) ApiDeleteDnsRecordRequest {
	r.nameServer = &nameServer
	return r
}

// This parameter is required when deleting PTR record 
func (r ApiDeleteDnsRecordRequest) PtrName(ptrName string) ApiDeleteDnsRecordRequest {
	r.ptrName = &ptrName
	return r
}

// This parameter is required when deleting MX record 
func (r ApiDeleteDnsRecordRequest) Preference(preference string) ApiDeleteDnsRecordRequest {
	r.preference = &preference
	return r
}

// This parameter is required when deleting MX record 
func (r ApiDeleteDnsRecordRequest) Exchange(exchange string) ApiDeleteDnsRecordRequest {
	r.exchange = &exchange
	return r
}

// This parameter is required when deleting TXT record 
func (r ApiDeleteDnsRecordRequest) Text(text string) ApiDeleteDnsRecordRequest {
	r.text = &text
	return r
}

// This parameter is used when deleting TXT record. Default value is set to false when unspecified 
func (r ApiDeleteDnsRecordRequest) SplitText(splitText bool) ApiDeleteDnsRecordRequest {
	r.splitText = &splitText
	return r
}

// This parameter is required when deleting the SRV record 
func (r ApiDeleteDnsRecordRequest) Priority(priority int32) ApiDeleteDnsRecordRequest {
	r.priority = &priority
	return r
}

// This parameter is required when deleting the SRV record 
func (r ApiDeleteDnsRecordRequest) Weight(weight int32) ApiDeleteDnsRecordRequest {
	r.weight = &weight
	return r
}

// This parameter is required when deleting the SRV record 
func (r ApiDeleteDnsRecordRequest) Port(port int32) ApiDeleteDnsRecordRequest {
	r.port = &port
	return r
}

// This parameter is required when deleting the SRV record 
func (r ApiDeleteDnsRecordRequest) Target(target string) ApiDeleteDnsRecordRequest {
	r.target = &target
	return r
}

// This parameter is required when deleting the NAPTR record 
func (r ApiDeleteDnsRecordRequest) NaptrOrder(naptrOrder int32) ApiDeleteDnsRecordRequest {
	r.naptrOrder = &naptrOrder
	return r
}

// This parameter is required for deleting the NAPTR record 
func (r ApiDeleteDnsRecordRequest) NaptrPreference(naptrPreference int32) ApiDeleteDnsRecordRequest {
	r.naptrPreference = &naptrPreference
	return r
}

// This parameter is required for deleting the NAPTR record 
func (r ApiDeleteDnsRecordRequest) NaptrFlags(naptrFlags string) ApiDeleteDnsRecordRequest {
	r.naptrFlags = &naptrFlags
	return r
}

// This parameter is required for deleting the NAPTR record 
func (r ApiDeleteDnsRecordRequest) NaptrServices(naptrServices string) ApiDeleteDnsRecordRequest {
	r.naptrServices = &naptrServices
	return r
}

// This parameter is required for deleting the NAPTR record 
func (r ApiDeleteDnsRecordRequest) NaptrRegexp(naptrRegexp string) ApiDeleteDnsRecordRequest {
	r.naptrRegexp = &naptrRegexp
	return r
}

// This parameter is required for deleting the NAPTR record 
func (r ApiDeleteDnsRecordRequest) NaptrReplacement(naptrReplacement string) ApiDeleteDnsRecordRequest {
	r.naptrReplacement = &naptrReplacement
	return r
}

// This parameter is required when deleting DS record 
func (r ApiDeleteDnsRecordRequest) KeyTag(keyTag string) ApiDeleteDnsRecordRequest {
	r.keyTag = &keyTag
	return r
}

// This parameter is required when deleting DS record 
func (r ApiDeleteDnsRecordRequest) Algorithm(algorithm string) ApiDeleteDnsRecordRequest {
	r.algorithm = &algorithm
	return r
}

// This parameter is required when deleting DS record 
func (r ApiDeleteDnsRecordRequest) DigestType(digestType string) ApiDeleteDnsRecordRequest {
	r.digestType = &digestType
	return r
}

// This parameter is required when deleting DS record 
func (r ApiDeleteDnsRecordRequest) Digest(digest string) ApiDeleteDnsRecordRequest {
	r.digest = &digest
	return r
}

// This parameter is required when deleting SSHFP record 
func (r ApiDeleteDnsRecordRequest) SshfpAlgorithm(sshfpAlgorithm string) ApiDeleteDnsRecordRequest {
	r.sshfpAlgorithm = &sshfpAlgorithm
	return r
}

// This parameter is required when deleting SSHFP record 
func (r ApiDeleteDnsRecordRequest) SshfpFingerprintType(sshfpFingerprintType string) ApiDeleteDnsRecordRequest {
	r.sshfpFingerprintType = &sshfpFingerprintType
	return r
}

// This parameter is required when deleting SSHFP record 
func (r ApiDeleteDnsRecordRequest) SshfpFingerprint(sshfpFingerprint string) ApiDeleteDnsRecordRequest {
	r.sshfpFingerprint = &sshfpFingerprint
	return r
}

// This parameter is required when deleting TLSA record 
func (r ApiDeleteDnsRecordRequest) TlsaCertificateUsage(tlsaCertificateUsage string) ApiDeleteDnsRecordRequest {
	r.tlsaCertificateUsage = &tlsaCertificateUsage
	return r
}

// This parameter is required when deleting TLSA record 
func (r ApiDeleteDnsRecordRequest) TlsaSelector(tlsaSelector string) ApiDeleteDnsRecordRequest {
	r.tlsaSelector = &tlsaSelector
	return r
}

// This parameter is required when deleting TLSA record 
func (r ApiDeleteDnsRecordRequest) TlsaMatchingType(tlsaMatchingType string) ApiDeleteDnsRecordRequest {
	r.tlsaMatchingType = &tlsaMatchingType
	return r
}

// This parameter is required when deleting TLSA record 
func (r ApiDeleteDnsRecordRequest) TlsaCertificateAssociationData(tlsaCertificateAssociationData string) ApiDeleteDnsRecordRequest {
	r.tlsaCertificateAssociationData = &tlsaCertificateAssociationData
	return r
}

// The priority value for SVCB or HTTPS record. This parameter is required for deleting SCVB or HTTPS record 
func (r ApiDeleteDnsRecordRequest) SvcPriority(svcPriority string) ApiDeleteDnsRecordRequest {
	r.svcPriority = &svcPriority
	return r
}

// TThe priority value for SVCB or HTTPS record. This parameter is required for deleting SCVB or HTTPS record 
func (r ApiDeleteDnsRecordRequest) SvcTargetName(svcTargetName string) ApiDeleteDnsRecordRequest {
	r.svcTargetName = &svcTargetName
	return r
}

// The service parameters for SVCB or HTTPS record which is a pipe separated list of key and value. For example, alpn|h2,h3|port|53443. To clear existing values, set it to false. This parameter  is required for deleting SCVB or HTTPS record. 
func (r ApiDeleteDnsRecordRequest) SvcParams(svcParams string) ApiDeleteDnsRecordRequest {
	r.svcParams = &svcParams
	return r
}

// The priority value in the URI record. This parameter is required when deleting the URI record 
func (r ApiDeleteDnsRecordRequest) UriPriority(uriPriority int32) ApiDeleteDnsRecordRequest {
	r.uriPriority = &uriPriority
	return r
}

// The weight value in the URI record. This parameter is required when deleting the URI record 
func (r ApiDeleteDnsRecordRequest) UriWeight(uriWeight int32) ApiDeleteDnsRecordRequest {
	r.uriWeight = &uriWeight
	return r
}

// The URI value in the URI record. This parameter is required when deleting the URI record 
func (r ApiDeleteDnsRecordRequest) Uri(uri string) ApiDeleteDnsRecordRequest {
	r.uri = &uri
	return r
}

// This is the flags parameter in the CAA record. This parameter is required when deleting  the CAA record 
func (r ApiDeleteDnsRecordRequest) Flags(flags int32) ApiDeleteDnsRecordRequest {
	r.flags = &flags
	return r
}

// This is the tag parameter in the CAA record. This parameter is required when deleting the CAA record. 
func (r ApiDeleteDnsRecordRequest) Tag(tag string) ApiDeleteDnsRecordRequest {
	r.tag = &tag
	return r
}

// This parameter is required when deleting the CAA record 
func (r ApiDeleteDnsRecordRequest) Value(value string) ApiDeleteDnsRecordRequest {
	r.value = &value
	return r
}

// This parameter is required when deleting the ANAME record 
func (r ApiDeleteDnsRecordRequest) Aname(aname string) ApiDeleteDnsRecordRequest {
	r.aname = &aname
	return r
}

// This is the protocol parameter in the FWD record. Valid values are [Udp, Tcp, Tls, Https, Quic].  This parameter is optional and default value Udp will be used when deleting the FWD record 
func (r ApiDeleteDnsRecordRequest) Protocol(protocol string) ApiDeleteDnsRecordRequest {
	r.protocol = &protocol
	return r
}

// This parameter is required when deleting the FWD record 
func (r ApiDeleteDnsRecordRequest) Forwarder(forwarder string) ApiDeleteDnsRecordRequest {
	r.forwarder = &forwarder
	return r
}

// This parameter is used for deleting unknown i.e. unsupported record types.  The value must be formatted as a hex string or a colon separated hex string. 
func (r ApiDeleteDnsRecordRequest) Rdata(rdata string) ApiDeleteDnsRecordRequest {
	r.rdata = &rdata
	return r
}

func (r ApiDeleteDnsRecordRequest) Execute() (*CommonResponse, *http.Response, error) {
	return r.ApiService.DeleteDnsRecordExecute(r)
}

/*
DeleteDnsRecord Deletes a record from an authoritative zone

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteDnsRecordRequest
*/
func (a *DnsRecordAPIService) DeleteDnsRecord(ctx context.Context) ApiDeleteDnsRecordRequest {
	return ApiDeleteDnsRecordRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CommonResponse
func (a *DnsRecordAPIService) DeleteDnsRecordExecute(r ApiDeleteDnsRecordRequest) (*CommonResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DnsRecordAPIService.DeleteDnsRecord")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/zones/records/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.domain == nil {
		return localVarReturnValue, nil, reportError("domain is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "domain", r.domain, "form", "")
	if r.zone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zone", r.zone, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.ipAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ipAddress", r.ipAddress, "form", "")
	}
	if r.updateSvcbHints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updateSvcbHints", r.updateSvcbHints, "form", "")
	}
	if r.nameServer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameServer", r.nameServer, "form", "")
	}
	if r.ptrName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ptrName", r.ptrName, "form", "")
	}
	if r.preference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preference", r.preference, "form", "")
	}
	if r.exchange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exchange", r.exchange, "form", "")
	}
	if r.text != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "form", "")
	}
	if r.splitText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "splitText", r.splitText, "form", "")
	}
	if r.priority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priority", r.priority, "form", "")
	}
	if r.weight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight", r.weight, "form", "")
	}
	if r.port != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "port", r.port, "form", "")
	}
	if r.target != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target", r.target, "form", "")
	}
	if r.naptrOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrOrder", r.naptrOrder, "form", "")
	}
	if r.naptrPreference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrPreference", r.naptrPreference, "form", "")
	}
	if r.naptrFlags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrFlags", r.naptrFlags, "form", "")
	}
	if r.naptrServices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrServices", r.naptrServices, "form", "")
	}
	if r.naptrRegexp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrRegexp", r.naptrRegexp, "form", "")
	}
	if r.naptrReplacement != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrReplacement", r.naptrReplacement, "form", "")
	}
	if r.keyTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyTag", r.keyTag, "form", "")
	}
	if r.algorithm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "algorithm", r.algorithm, "form", "")
	}
	if r.digestType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "digestType", r.digestType, "form", "")
	}
	if r.digest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "digest", r.digest, "form", "")
	}
	if r.sshfpAlgorithm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sshfpAlgorithm", r.sshfpAlgorithm, "form", "")
	}
	if r.sshfpFingerprintType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sshfpFingerprintType", r.sshfpFingerprintType, "form", "")
	}
	if r.sshfpFingerprint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sshfpFingerprint", r.sshfpFingerprint, "form", "")
	}
	if r.tlsaCertificateUsage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tlsaCertificateUsage", r.tlsaCertificateUsage, "form", "")
	}
	if r.tlsaSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tlsaSelector", r.tlsaSelector, "form", "")
	}
	if r.tlsaMatchingType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tlsaMatchingType", r.tlsaMatchingType, "form", "")
	}
	if r.tlsaCertificateAssociationData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tlsaCertificateAssociationData", r.tlsaCertificateAssociationData, "form", "")
	}
	if r.svcPriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "svcPriority", r.svcPriority, "form", "")
	}
	if r.svcTargetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "svcTargetName", r.svcTargetName, "form", "")
	}
	if r.svcParams != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "svcParams", r.svcParams, "form", "")
	}
	if r.uriPriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uriPriority", r.uriPriority, "form", "")
	}
	if r.uriWeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uriWeight", r.uriWeight, "form", "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "form", "")
	}
	if r.flags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flags", r.flags, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "form", "")
	}
	if r.aname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aname", r.aname, "form", "")
	}
	if r.protocol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "protocol", r.protocol, "form", "")
	}
	if r.forwarder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "forwarder", r.forwarder, "form", "")
	}
	if r.rdata != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rdata", r.rdata, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDnsRecordRequest struct {
	ctx context.Context
	ApiService *DnsRecordAPIService
	domain *string
	newDomain *string
	zone *string
	type_ *string
	ttl *int32
	disable *bool
	comments *string
	ipAddress *string
	newIpAddress *string
	ptr *bool
	createPtrZone *bool
	updateSvcbHints *bool
	nameServer *string
	newNameServer *string
	glue *string
	cname *string
	primaryNameServer *string
	responsiblePerson *string
	serial *int32
	refresh *int32
	retry *int32
	expire *int32
	minimum *int32
	primaryAddresses *[]string
	zoneTransferProtocol *string
	tsigKeyName *string
	ptrName *string
	newPtrName *string
	preference *string
	newPreference *string
	exchange *string
	newExchange *string
	text *string
	newText *string
	splitText *bool
	newSplitText *bool
	priority *int32
	newPriority *int32
	weight *int32
	newWeight *int32
	port *int32
	newPort *int32
	target *string
	newTarget *string
	naptrOrder *int32
	naptrNewOrder *int32
	naptrPreference *int32
	naptrNewPreference *int32
	naptrFlags *string
	naptrNewFlags *string
	naptrServices *string
	naptrNewServices *string
	naptrRegexp *string
	naptrNewRegexp *string
	naptrReplacement *string
	naptrNewReplacement *string
	dname *string
	keyTag *string
	newKeyTag *string
	algorithm *string
	newAlgorithm *string
	digestType *string
	newDigestType *string
	digest *string
	newDigest *string
	sshfpAlgorithm *string
	newSshfpAlgorithm *string
	sshfpFingerprintType *string
	newSshfpFingerprintType *string
	sshfpFingerprint *string
	newSshfpFingerprint *string
	tlsaCertificateUsage *string
	newTlsaCertificateUsage *string
	tlsaSelector *string
	newTlsaSelector *string
	tlsaMatchingType *string
	newTlsaMatchingType *string
	tlsaCertificateAssociationData *string
	newTlsaCertificateAssociationData *string
	svcPriority *string
	newSvcPriority *string
	svcTargetName *string
	newSvcTargetName *string
	svcParams *string
	newSvcParams *string
	autoIpv4Hint *bool
	autoIpv6Hint *bool
	uriPriority *int32
	newUriPriority *int32
	uriWeight *int32
	newUriWeight *int32
	uri *string
	newUri *string
	flags *int32
	newFlags *int32
	tag *string
	newTag *string
	value *string
	newValue *string
	aname *string
	newAName *string
	protocol *string
	newProtocol *string
	forwarder *string
	newForwarder *string
	dnssecValidation *bool
	proxyType *string
	proxyAddress *string
	proxyPort *string
	proxyUsername *string
	proxyPassword *string
	appName *string
	classPath *string
	recordData *string
	rdata *string
	newRData *string
}

// The domain name of the zone to update the record
func (r ApiUpdateDnsRecordRequest) Domain(domain string) ApiUpdateDnsRecordRequest {
	r.domain = &domain
	return r
}

// The new domain name to be set for the record. To be used to rename sub domain name of the record 
func (r ApiUpdateDnsRecordRequest) NewDomain(newDomain string) ApiUpdateDnsRecordRequest {
	r.newDomain = &newDomain
	return r
}

// The name of the authoritative zone into which the domain exists. When unspecified, the closest authoritative zone will be used 
func (r ApiUpdateDnsRecordRequest) Zone(zone string) ApiUpdateDnsRecordRequest {
	r.zone = &zone
	return r
}

// The type of the resource record to update 
func (r ApiUpdateDnsRecordRequest) Type_(type_ string) ApiUpdateDnsRecordRequest {
	r.type_ = &type_
	return r
}

// The TTL value of the resource record. Default value of 3600 is used when  parameter is missing 
func (r ApiUpdateDnsRecordRequest) Ttl(ttl int32) ApiUpdateDnsRecordRequest {
	r.ttl = &ttl
	return r
}

// Specifies if the record should be disabled. The default value is false when this parameter is missing 
func (r ApiUpdateDnsRecordRequest) Disable(disable bool) ApiUpdateDnsRecordRequest {
	r.disable = &disable
	return r
}

// Sets comments for the updated resource record
func (r ApiUpdateDnsRecordRequest) Comments(comments string) ApiUpdateDnsRecordRequest {
	r.comments = &comments
	return r
}

// The current IP address in the A or AAAA record. This parameter is required when updating A or AAAA record 
func (r ApiUpdateDnsRecordRequest) IpAddress(ipAddress string) ApiUpdateDnsRecordRequest {
	r.ipAddress = &ipAddress
	return r
}

// The new IP address in the A or AAAA record. This parameter when missing will use the current value in the record. 
func (r ApiUpdateDnsRecordRequest) NewIpAddress(newIpAddress string) ApiUpdateDnsRecordRequest {
	r.newIpAddress = &newIpAddress
	return r
}

// Set this option to true to specify if the PTR record associated with the A or AAAA record must also be updated. This option is used only for A and AAAA records 
func (r ApiUpdateDnsRecordRequest) Ptr(ptr bool) ApiUpdateDnsRecordRequest {
	r.ptr = &ptr
	return r
}

// Set this option to true to create a reverse zone for PTR record. This option is used  only for A and AAAA records. 
func (r ApiUpdateDnsRecordRequest) CreatePtrZone(createPtrZone bool) ApiUpdateDnsRecordRequest {
	r.createPtrZone = &createPtrZone
	return r
}

// Set this option to true to update any SVCB/HTTPS records in the zone that has Automatic Hints  option enabled and matches its target name with the current record&#39;s domain name. This option is used for A and AAAA records 
func (r ApiUpdateDnsRecordRequest) UpdateSvcbHints(updateSvcbHints bool) ApiUpdateDnsRecordRequest {
	r.updateSvcbHints = &updateSvcbHints
	return r
}

// The current name server domain name. This option is required for updating NS record 
func (r ApiUpdateDnsRecordRequest) NameServer(nameServer string) ApiUpdateDnsRecordRequest {
	r.nameServer = &nameServer
	return r
}

// The new server domain name. This option is used for updating NS record 
func (r ApiUpdateDnsRecordRequest) NewNameServer(newNameServer string) ApiUpdateDnsRecordRequest {
	r.newNameServer = &newNameServer
	return r
}

// The comma separated list of IP addresses set as glue for the NS record. This parameter  is used only when updating NS record 
func (r ApiUpdateDnsRecordRequest) Glue(glue string) ApiUpdateDnsRecordRequest {
	r.glue = &glue
	return r
}

// The CNAME domain name to update in the existing CNAME record 
func (r ApiUpdateDnsRecordRequest) Cname(cname string) ApiUpdateDnsRecordRequest {
	r.cname = &cname
	return r
}

// This is the primary name server parameter in the SOA record. This parameter  is required when updating the SOA record. 
func (r ApiUpdateDnsRecordRequest) PrimaryNameServer(primaryNameServer string) ApiUpdateDnsRecordRequest {
	r.primaryNameServer = &primaryNameServer
	return r
}

// This is the responsible person parameter in the SOA record. This parameter  is required when updating the SOA record 
func (r ApiUpdateDnsRecordRequest) ResponsiblePerson(responsiblePerson string) ApiUpdateDnsRecordRequest {
	r.responsiblePerson = &responsiblePerson
	return r
}

// This is the serial parameter in the SOA record. This parameter is required  when updating the SOA record 
func (r ApiUpdateDnsRecordRequest) Serial(serial int32) ApiUpdateDnsRecordRequest {
	r.serial = &serial
	return r
}

// This is the refresh parameter in the SOA record. This parameter is required  when updating the SOA record 
func (r ApiUpdateDnsRecordRequest) Refresh(refresh int32) ApiUpdateDnsRecordRequest {
	r.refresh = &refresh
	return r
}

// This is the retry parameter in the SOA record. This parameter is required  when updating the SOA record 
func (r ApiUpdateDnsRecordRequest) Retry(retry int32) ApiUpdateDnsRecordRequest {
	r.retry = &retry
	return r
}

// This is the expire parameter in the SOA record. This parameter is required when updating the SOA record 
func (r ApiUpdateDnsRecordRequest) Expire(expire int32) ApiUpdateDnsRecordRequest {
	r.expire = &expire
	return r
}

// This is the minimum parameter in the SOA record. This parameter is required when updating the SOA record 
func (r ApiUpdateDnsRecordRequest) Minimum(minimum int32) ApiUpdateDnsRecordRequest {
	r.minimum = &minimum
	return r
}

// This is a comma separated list of IP addresses of the primary name server. This parameter is to be used with secondary and stub zones where the primary name server address is not directly resolvable 
func (r ApiUpdateDnsRecordRequest) PrimaryAddresses(primaryAddresses []string) ApiUpdateDnsRecordRequest {
	r.primaryAddresses = &primaryAddresses
	return r
}

// The zone transfer protocol to be used by the secondary zone. Valid values are [Tcp, Tls, Quic]. This parameter is used with SOA record 
func (r ApiUpdateDnsRecordRequest) ZoneTransferProtocol(zoneTransferProtocol string) ApiUpdateDnsRecordRequest {
	r.zoneTransferProtocol = &zoneTransferProtocol
	return r
}

// The TSIG key name to be used by the secondary zone. This parameter is used with SOA record 
func (r ApiUpdateDnsRecordRequest) TsigKeyName(tsigKeyName string) ApiUpdateDnsRecordRequest {
	r.tsigKeyName = &tsigKeyName
	return r
}

// The current PTR domain name. This option is required for updating PTR record 
func (r ApiUpdateDnsRecordRequest) PtrName(ptrName string) ApiUpdateDnsRecordRequest {
	r.ptrName = &ptrName
	return r
}

// The new PTR domain name. This option is required for updating PTR record 
func (r ApiUpdateDnsRecordRequest) NewPtrName(newPtrName string) ApiUpdateDnsRecordRequest {
	r.newPtrName = &newPtrName
	return r
}

// The current preference value in an MX record. This parameter when missing will default to 1 value. This parameter is used only when updating MX record 
func (r ApiUpdateDnsRecordRequest) Preference(preference string) ApiUpdateDnsRecordRequest {
	r.preference = &preference
	return r
}

// The new preference value in an MX record. This parameter when missing will use the old value. This parameter is used only when updating MX record 
func (r ApiUpdateDnsRecordRequest) NewPreference(newPreference string) ApiUpdateDnsRecordRequest {
	r.newPreference = &newPreference
	return r
}

// The current exchange domain name. This option is required for updating MX record 
func (r ApiUpdateDnsRecordRequest) Exchange(exchange string) ApiUpdateDnsRecordRequest {
	r.exchange = &exchange
	return r
}

// The new exchange domain name. This option is required for updating MX record 
func (r ApiUpdateDnsRecordRequest) NewExchange(newExchange string) ApiUpdateDnsRecordRequest {
	r.newExchange = &newExchange
	return r
}

// The current text value. This option is required for updating TXT record 
func (r ApiUpdateDnsRecordRequest) Text(text string) ApiUpdateDnsRecordRequest {
	r.text = &text
	return r
}

// The new text value. This option is required for updating TXT record 
func (r ApiUpdateDnsRecordRequest) NewText(newText string) ApiUpdateDnsRecordRequest {
	r.newText = &newText
	return r
}

// The current split text value. This option is used for updating TXT record and is set to false when unspecified 
func (r ApiUpdateDnsRecordRequest) SplitText(splitText bool) ApiUpdateDnsRecordRequest {
	r.splitText = &splitText
	return r
}

// The new split text value. This option is used for updating TXT record and is set to current split text value when unspecified 
func (r ApiUpdateDnsRecordRequest) NewSplitText(newSplitText bool) ApiUpdateDnsRecordRequest {
	r.newSplitText = &newSplitText
	return r
}

// This is the current priority in the SRV record. This parameter is required when updating the SRV record 
func (r ApiUpdateDnsRecordRequest) Priority(priority int32) ApiUpdateDnsRecordRequest {
	r.priority = &priority
	return r
}

// This is the new priority in the SRV record. This parameter when missing will use the old value. This parameter is used when updating the SRV record 
func (r ApiUpdateDnsRecordRequest) NewPriority(newPriority int32) ApiUpdateDnsRecordRequest {
	r.newPriority = &newPriority
	return r
}

// This is the current weight in the SRV record. This parameter is required when updating the SRV record 
func (r ApiUpdateDnsRecordRequest) Weight(weight int32) ApiUpdateDnsRecordRequest {
	r.weight = &weight
	return r
}

// This is the new weight in the SRV record. This parameter when missing will use the old value. This parameter is used when updating the SRV record 
func (r ApiUpdateDnsRecordRequest) NewWeight(newWeight int32) ApiUpdateDnsRecordRequest {
	r.newWeight = &newWeight
	return r
}

// This is the port parameter in the SRV record. This parameter is required when updating the SRV record 
func (r ApiUpdateDnsRecordRequest) Port(port int32) ApiUpdateDnsRecordRequest {
	r.port = &port
	return r
}

// This is the port parameter in the SRV record. This parameter is required when updating the SRV record 
func (r ApiUpdateDnsRecordRequest) NewPort(newPort int32) ApiUpdateDnsRecordRequest {
	r.newPort = &newPort
	return r
}

// The current target value. This parameter is required when updating the SRV record 
func (r ApiUpdateDnsRecordRequest) Target(target string) ApiUpdateDnsRecordRequest {
	r.target = &target
	return r
}

// The new target value. This parameter when missing will use the old value. This parameter is required when updating the SRV record 
func (r ApiUpdateDnsRecordRequest) NewTarget(newTarget string) ApiUpdateDnsRecordRequest {
	r.newTarget = &newTarget
	return r
}

// The current value in the NAPTR record. This parameter is required when  updating the NAPTR record 
func (r ApiUpdateDnsRecordRequest) NaptrOrder(naptrOrder int32) ApiUpdateDnsRecordRequest {
	r.naptrOrder = &naptrOrder
	return r
}

// The new value in the NAPTR record. This parameter when missing will use the old value. This parameter is used when updating the NAPTR record 
func (r ApiUpdateDnsRecordRequest) NaptrNewOrder(naptrNewOrder int32) ApiUpdateDnsRecordRequest {
	r.naptrNewOrder = &naptrNewOrder
	return r
}

// The current value in the NAPTR record. This parameter is required when updating the NAPTR record 
func (r ApiUpdateDnsRecordRequest) NaptrPreference(naptrPreference int32) ApiUpdateDnsRecordRequest {
	r.naptrPreference = &naptrPreference
	return r
}

// The new value in the NAPTR record. This parameter when missing will use the old value. This parameter is used when updating the NAPTR record 
func (r ApiUpdateDnsRecordRequest) NaptrNewPreference(naptrNewPreference int32) ApiUpdateDnsRecordRequest {
	r.naptrNewPreference = &naptrNewPreference
	return r
}

// The current value in the NAPTR record. This parameter is required when updating the NAPTR record 
func (r ApiUpdateDnsRecordRequest) NaptrFlags(naptrFlags string) ApiUpdateDnsRecordRequest {
	r.naptrFlags = &naptrFlags
	return r
}

// The new value in the NAPTR record. This parameter when missing will use the old value. This parameter is used when updating the NAPTR record 
func (r ApiUpdateDnsRecordRequest) NaptrNewFlags(naptrNewFlags string) ApiUpdateDnsRecordRequest {
	r.naptrNewFlags = &naptrNewFlags
	return r
}

// The current value in the NAPTR record. This parameter is required when updating the NAPTR record 
func (r ApiUpdateDnsRecordRequest) NaptrServices(naptrServices string) ApiUpdateDnsRecordRequest {
	r.naptrServices = &naptrServices
	return r
}

// The new value in the NAPTR record. This parameter when missing will use the old value. This parameter is used when updating the NAPTR record 
func (r ApiUpdateDnsRecordRequest) NaptrNewServices(naptrNewServices string) ApiUpdateDnsRecordRequest {
	r.naptrNewServices = &naptrNewServices
	return r
}

// The current value in the NAPTR record. This parameter is required when updating the NAPTR record 
func (r ApiUpdateDnsRecordRequest) NaptrRegexp(naptrRegexp string) ApiUpdateDnsRecordRequest {
	r.naptrRegexp = &naptrRegexp
	return r
}

// The new value in the NAPTR record. This parameter when missing will use the old value. This parameter is used when updating the NAPTR record 
func (r ApiUpdateDnsRecordRequest) NaptrNewRegexp(naptrNewRegexp string) ApiUpdateDnsRecordRequest {
	r.naptrNewRegexp = &naptrNewRegexp
	return r
}

// The current value in the NAPTR record. This parameter is required when updating the NAPTR record 
func (r ApiUpdateDnsRecordRequest) NaptrReplacement(naptrReplacement string) ApiUpdateDnsRecordRequest {
	r.naptrReplacement = &naptrReplacement
	return r
}

// The new value in the NAPTR record. This parameter when missing will use the old value. This parameter is used when updating the NAPTR record 
func (r ApiUpdateDnsRecordRequest) NaptrNewReplacement(naptrNewReplacement string) ApiUpdateDnsRecordRequest {
	r.naptrNewReplacement = &naptrNewReplacement
	return r
}

// The DNAME domain name. This parameter is required when updating the DNAME record 
func (r ApiUpdateDnsRecordRequest) Dname(dname string) ApiUpdateDnsRecordRequest {
	r.dname = &dname
	return r
}

// This parameter is required when updating DS record 
func (r ApiUpdateDnsRecordRequest) KeyTag(keyTag string) ApiUpdateDnsRecordRequest {
	r.keyTag = &keyTag
	return r
}

// This parameter is required when updating DS record 
func (r ApiUpdateDnsRecordRequest) NewKeyTag(newKeyTag string) ApiUpdateDnsRecordRequest {
	r.newKeyTag = &newKeyTag
	return r
}

// This parameter is required when updating DS record 
func (r ApiUpdateDnsRecordRequest) Algorithm(algorithm string) ApiUpdateDnsRecordRequest {
	r.algorithm = &algorithm
	return r
}

// This parameter is required when updating DS record 
func (r ApiUpdateDnsRecordRequest) NewAlgorithm(newAlgorithm string) ApiUpdateDnsRecordRequest {
	r.newAlgorithm = &newAlgorithm
	return r
}

// This parameter is required when updating DS record 
func (r ApiUpdateDnsRecordRequest) DigestType(digestType string) ApiUpdateDnsRecordRequest {
	r.digestType = &digestType
	return r
}

// This parameter is required when updating DS record 
func (r ApiUpdateDnsRecordRequest) NewDigestType(newDigestType string) ApiUpdateDnsRecordRequest {
	r.newDigestType = &newDigestType
	return r
}

// This parameter is required when updating DS record 
func (r ApiUpdateDnsRecordRequest) Digest(digest string) ApiUpdateDnsRecordRequest {
	r.digest = &digest
	return r
}

// This parameter is required when updating DS record 
func (r ApiUpdateDnsRecordRequest) NewDigest(newDigest string) ApiUpdateDnsRecordRequest {
	r.newDigest = &newDigest
	return r
}

// This parameter is required when updating SSHFP record 
func (r ApiUpdateDnsRecordRequest) SshfpAlgorithm(sshfpAlgorithm string) ApiUpdateDnsRecordRequest {
	r.sshfpAlgorithm = &sshfpAlgorithm
	return r
}

// This parameter is required when updating SSHFP record 
func (r ApiUpdateDnsRecordRequest) NewSshfpAlgorithm(newSshfpAlgorithm string) ApiUpdateDnsRecordRequest {
	r.newSshfpAlgorithm = &newSshfpAlgorithm
	return r
}

// This parameter is required when updating SSHFP record 
func (r ApiUpdateDnsRecordRequest) SshfpFingerprintType(sshfpFingerprintType string) ApiUpdateDnsRecordRequest {
	r.sshfpFingerprintType = &sshfpFingerprintType
	return r
}

// This parameter is required when updating SSHFP record 
func (r ApiUpdateDnsRecordRequest) NewSshfpFingerprintType(newSshfpFingerprintType string) ApiUpdateDnsRecordRequest {
	r.newSshfpFingerprintType = &newSshfpFingerprintType
	return r
}

// This parameter is required when updating SSHFP record 
func (r ApiUpdateDnsRecordRequest) SshfpFingerprint(sshfpFingerprint string) ApiUpdateDnsRecordRequest {
	r.sshfpFingerprint = &sshfpFingerprint
	return r
}

// This parameter is required when updating SSHFP record 
func (r ApiUpdateDnsRecordRequest) NewSshfpFingerprint(newSshfpFingerprint string) ApiUpdateDnsRecordRequest {
	r.newSshfpFingerprint = &newSshfpFingerprint
	return r
}

// This parameter is required when updating TLSA record 
func (r ApiUpdateDnsRecordRequest) TlsaCertificateUsage(tlsaCertificateUsage string) ApiUpdateDnsRecordRequest {
	r.tlsaCertificateUsage = &tlsaCertificateUsage
	return r
}

// This parameter is required when updating TLSA record 
func (r ApiUpdateDnsRecordRequest) NewTlsaCertificateUsage(newTlsaCertificateUsage string) ApiUpdateDnsRecordRequest {
	r.newTlsaCertificateUsage = &newTlsaCertificateUsage
	return r
}

// This parameter is required when updating TLSA record 
func (r ApiUpdateDnsRecordRequest) TlsaSelector(tlsaSelector string) ApiUpdateDnsRecordRequest {
	r.tlsaSelector = &tlsaSelector
	return r
}

// This parameter is required when updating TLSA record 
func (r ApiUpdateDnsRecordRequest) NewTlsaSelector(newTlsaSelector string) ApiUpdateDnsRecordRequest {
	r.newTlsaSelector = &newTlsaSelector
	return r
}

// This parameter is required when updating TLSA record 
func (r ApiUpdateDnsRecordRequest) TlsaMatchingType(tlsaMatchingType string) ApiUpdateDnsRecordRequest {
	r.tlsaMatchingType = &tlsaMatchingType
	return r
}

// This parameter is required when updating TLSA record 
func (r ApiUpdateDnsRecordRequest) NewTlsaMatchingType(newTlsaMatchingType string) ApiUpdateDnsRecordRequest {
	r.newTlsaMatchingType = &newTlsaMatchingType
	return r
}

// This parameter is required when updating TLSA record 
func (r ApiUpdateDnsRecordRequest) TlsaCertificateAssociationData(tlsaCertificateAssociationData string) ApiUpdateDnsRecordRequest {
	r.tlsaCertificateAssociationData = &tlsaCertificateAssociationData
	return r
}

// This parameter is required when updating TLSA record 
func (r ApiUpdateDnsRecordRequest) NewTlsaCertificateAssociationData(newTlsaCertificateAssociationData string) ApiUpdateDnsRecordRequest {
	r.newTlsaCertificateAssociationData = &newTlsaCertificateAssociationData
	return r
}

// The priority value for SVCB or HTTPS record. This parameter is required for updating SCVB or HTTPS record 
func (r ApiUpdateDnsRecordRequest) SvcPriority(svcPriority string) ApiUpdateDnsRecordRequest {
	r.svcPriority = &svcPriority
	return r
}

// The new priority value for SVCB or HTTPS record. This parameter when  missing will use the old value. 
func (r ApiUpdateDnsRecordRequest) NewSvcPriority(newSvcPriority string) ApiUpdateDnsRecordRequest {
	r.newSvcPriority = &newSvcPriority
	return r
}

// The target domain name for SVCB or HTTPS record. This parameter is required for updating SCVB or HTTPS record 
func (r ApiUpdateDnsRecordRequest) SvcTargetName(svcTargetName string) ApiUpdateDnsRecordRequest {
	r.svcTargetName = &svcTargetName
	return r
}

// The new target domain name for SVCB or HTTPS record. This parameter when missing will use the old value 
func (r ApiUpdateDnsRecordRequest) NewSvcTargetName(newSvcTargetName string) ApiUpdateDnsRecordRequest {
	r.newSvcTargetName = &newSvcTargetName
	return r
}

// The service parameters for SVCB or HTTPS record which is a pipe separated list of key and value. For example, alpn|h2,h3|port|53443. To clear existing values,  set it to false. This parameter is required for updating SCVB or HTTPS record 
func (r ApiUpdateDnsRecordRequest) SvcParams(svcParams string) ApiUpdateDnsRecordRequest {
	r.svcParams = &svcParams
	return r
}

// The new service parameters for SVCB or HTTPS record which is a pipe separated list of key and value. To clear existing values, set it to false. This parameter when missing will use the old value 
func (r ApiUpdateDnsRecordRequest) NewSvcParams(newSvcParams string) ApiUpdateDnsRecordRequest {
	r.newSvcParams = &newSvcParams
	return r
}

// Set this option to true to enable Automatic Hints for the ipv4hint parameter  in the newSvcParams. This option is valid only for SVCB and HTTPS records 
func (r ApiUpdateDnsRecordRequest) AutoIpv4Hint(autoIpv4Hint bool) ApiUpdateDnsRecordRequest {
	r.autoIpv4Hint = &autoIpv4Hint
	return r
}

// Set this option to true to enable Automatic Hints for the ipv6hint parameter in the newSvcParams. This option is valid only for SVCB and HTTPS records 
func (r ApiUpdateDnsRecordRequest) AutoIpv6Hint(autoIpv6Hint bool) ApiUpdateDnsRecordRequest {
	r.autoIpv6Hint = &autoIpv6Hint
	return r
}

// The priority value for the URI record. This parameter is required for updating the URI record 
func (r ApiUpdateDnsRecordRequest) UriPriority(uriPriority int32) ApiUpdateDnsRecordRequest {
	r.uriPriority = &uriPriority
	return r
}

// The new priority value for the URI record. This parameter when missing will use the old value 
func (r ApiUpdateDnsRecordRequest) NewUriPriority(newUriPriority int32) ApiUpdateDnsRecordRequest {
	r.newUriPriority = &newUriPriority
	return r
}

// The weight value for the URI record. This parameter is required for updating the URI record 
func (r ApiUpdateDnsRecordRequest) UriWeight(uriWeight int32) ApiUpdateDnsRecordRequest {
	r.uriWeight = &uriWeight
	return r
}

// The new weight value for the URI record. This parameter when  missing will use the old value 
func (r ApiUpdateDnsRecordRequest) NewUriWeight(newUriWeight int32) ApiUpdateDnsRecordRequest {
	r.newUriWeight = &newUriWeight
	return r
}

// The URI value for the URI record. This parameter is required for updating the URI record 
func (r ApiUpdateDnsRecordRequest) Uri(uri string) ApiUpdateDnsRecordRequest {
	r.uri = &uri
	return r
}

// The new URI value for the URI record. This parameter when missing  will use the old value 
func (r ApiUpdateDnsRecordRequest) NewUri(newUri string) ApiUpdateDnsRecordRequest {
	r.newUri = &newUri
	return r
}

// This is the flags parameter in the CAA record. This parameter is required when updating the CAA record 
func (r ApiUpdateDnsRecordRequest) Flags(flags int32) ApiUpdateDnsRecordRequest {
	r.flags = &flags
	return r
}

// This is the new value of the flags parameter in the CAA record. This parameter  is used to update the flags parameter in the CAA record 
func (r ApiUpdateDnsRecordRequest) NewFlags(newFlags int32) ApiUpdateDnsRecordRequest {
	r.newFlags = &newFlags
	return r
}

// This is the tag parameter in the CAA record. This parameter is required  when updating the CAA record. 
func (r ApiUpdateDnsRecordRequest) Tag(tag string) ApiUpdateDnsRecordRequest {
	r.tag = &tag
	return r
}

// This is the new value of the tag parameter in the CAA record. This parameter  is used to update the tag parameter in the CAA record 
func (r ApiUpdateDnsRecordRequest) NewTag(newTag string) ApiUpdateDnsRecordRequest {
	r.newTag = &newTag
	return r
}

// The current value in CAA record. This parameter is required when updating the CAA record 
func (r ApiUpdateDnsRecordRequest) Value(value string) ApiUpdateDnsRecordRequest {
	r.value = &value
	return r
}

// The new value in CAA record. This parameter is required when updating the CAA record 
func (r ApiUpdateDnsRecordRequest) NewValue(newValue string) ApiUpdateDnsRecordRequest {
	r.newValue = &newValue
	return r
}

// The current ANAME domain name. This parameter is required when updating  the ANAME record 
func (r ApiUpdateDnsRecordRequest) Aname(aname string) ApiUpdateDnsRecordRequest {
	r.aname = &aname
	return r
}

// The new ANAME domain name. This parameter is required when updating the ANAME record 
func (r ApiUpdateDnsRecordRequest) NewAName(newAName string) ApiUpdateDnsRecordRequest {
	r.newAName = &newAName
	return r
}

// This is the current protocol value in the FWD record. Valid values are [Udp, Tcp, Tls, Https, Quic]. This parameter is optional and default value Udp will be used when updating the FWD record 
func (r ApiUpdateDnsRecordRequest) Protocol(protocol string) ApiUpdateDnsRecordRequest {
	r.protocol = &protocol
	return r
}

// This is the new protocol value in the FWD record. Valid values are [Udp, Tcp, Tls, Https, Quic].  This parameter is optional and default value Udp will be used when updating the FWD record. 
func (r ApiUpdateDnsRecordRequest) NewProtocol(newProtocol string) ApiUpdateDnsRecordRequest {
	r.newProtocol = &newProtocol
	return r
}

// The current forwarder address. This parameter is required when updating the FWD record 
func (r ApiUpdateDnsRecordRequest) Forwarder(forwarder string) ApiUpdateDnsRecordRequest {
	r.forwarder = &forwarder
	return r
}

// The new forwarder address. This parameter is required when updating the FWD record 
func (r ApiUpdateDnsRecordRequest) NewForwarder(newForwarder string) ApiUpdateDnsRecordRequest {
	r.newForwarder = &newForwarder
	return r
}

// Set this boolean value to indicate if DNSSEC validation must be done.  This optional parameter is to be used with FWD records. Default value is false 
func (r ApiUpdateDnsRecordRequest) DnssecValidation(dnssecValidation bool) ApiUpdateDnsRecordRequest {
	r.dnssecValidation = &dnssecValidation
	return r
}

// The type of proxy that must be used for conditional forwarding. This optional parameter is to be used with FWD records. Valid values are [NoProxy, DefaultProxy, Http, Socks5]. Default value DefaultProxy is used when this parameter is missing 
func (r ApiUpdateDnsRecordRequest) ProxyType(proxyType string) ApiUpdateDnsRecordRequest {
	r.proxyType = &proxyType
	return r
}

// The proxy server address to use when proxyType is configured. This optional parameter is to be used with FWD records 
func (r ApiUpdateDnsRecordRequest) ProxyAddress(proxyAddress string) ApiUpdateDnsRecordRequest {
	r.proxyAddress = &proxyAddress
	return r
}

// The proxy server port to use when proxyType is configured. This optional parameter  is to be used with FWD records. 
func (r ApiUpdateDnsRecordRequest) ProxyPort(proxyPort string) ApiUpdateDnsRecordRequest {
	r.proxyPort = &proxyPort
	return r
}

// The proxy server username to use when proxyType is configured. This optional  parameter is to be used with FWD records. 
func (r ApiUpdateDnsRecordRequest) ProxyUsername(proxyUsername string) ApiUpdateDnsRecordRequest {
	r.proxyUsername = &proxyUsername
	return r
}

// The proxy server password to use when proxyType is configured. This optional parameter is to be used with FWD records. 
func (r ApiUpdateDnsRecordRequest) ProxyPassword(proxyPassword string) ApiUpdateDnsRecordRequest {
	r.proxyPassword = &proxyPassword
	return r
}

// This parameter is required for updating the APP record 
func (r ApiUpdateDnsRecordRequest) AppName(appName string) ApiUpdateDnsRecordRequest {
	r.appName = &appName
	return r
}

// This parameter is required for updating the APP record 
func (r ApiUpdateDnsRecordRequest) ClassPath(classPath string) ApiUpdateDnsRecordRequest {
	r.classPath = &classPath
	return r
}

// This parameter is used for updating the APP record as per the DNS app requirements 
func (r ApiUpdateDnsRecordRequest) RecordData(recordData string) ApiUpdateDnsRecordRequest {
	r.recordData = &recordData
	return r
}

// This parameter is used for updating unknown i.e. unsupported record types.  The value must be formatted as a hex string or a colon separated hex string 
func (r ApiUpdateDnsRecordRequest) Rdata(rdata string) ApiUpdateDnsRecordRequest {
	r.rdata = &rdata
	return r
}

// This parameter is used for updating unknown i.e. unsupported record types. The new value that must be formatted as a hex string or a colon separated hex string 
func (r ApiUpdateDnsRecordRequest) NewRData(newRData string) ApiUpdateDnsRecordRequest {
	r.newRData = &newRData
	return r
}

func (r ApiUpdateDnsRecordRequest) Execute() (*UpdateRecordResponse, *http.Response, error) {
	return r.ApiService.UpdateDnsRecordExecute(r)
}

/*
UpdateDnsRecord Updates an existing record in an authoritative zone

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateDnsRecordRequest
*/
func (a *DnsRecordAPIService) UpdateDnsRecord(ctx context.Context) ApiUpdateDnsRecordRequest {
	return ApiUpdateDnsRecordRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateRecordResponse
func (a *DnsRecordAPIService) UpdateDnsRecordExecute(r ApiUpdateDnsRecordRequest) (*UpdateRecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateRecordResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DnsRecordAPIService.UpdateDnsRecord")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/zones/records/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.domain == nil {
		return localVarReturnValue, nil, reportError("domain is required and must be specified")
	}
	if r.newDomain == nil {
		return localVarReturnValue, nil, reportError("newDomain is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "domain", r.domain, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "newDomain", r.newDomain, "form", "")
	if r.zone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zone", r.zone, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.ttl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ttl", r.ttl, "form", "")
	}
	if r.disable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disable", r.disable, "form", "")
	}
	if r.comments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments", r.comments, "form", "")
	}
	if r.ipAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ipAddress", r.ipAddress, "form", "")
	}
	if r.newIpAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newIpAddress", r.newIpAddress, "form", "")
	}
	if r.ptr != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ptr", r.ptr, "form", "")
	}
	if r.createPtrZone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createPtrZone", r.createPtrZone, "form", "")
	}
	if r.updateSvcbHints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updateSvcbHints", r.updateSvcbHints, "form", "")
	}
	if r.nameServer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameServer", r.nameServer, "form", "")
	}
	if r.newNameServer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newNameServer", r.newNameServer, "form", "")
	}
	if r.glue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "glue", r.glue, "form", "")
	}
	if r.cname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cname", r.cname, "form", "")
	}
	if r.primaryNameServer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "primaryNameServer", r.primaryNameServer, "form", "")
	}
	if r.responsiblePerson != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "responsiblePerson", r.responsiblePerson, "form", "")
	}
	if r.serial != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serial", r.serial, "form", "")
	}
	if r.refresh != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "refresh", r.refresh, "form", "")
	}
	if r.retry != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retry", r.retry, "form", "")
	}
	if r.expire != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expire", r.expire, "form", "")
	}
	if r.minimum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minimum", r.minimum, "form", "")
	}
	if r.primaryAddresses != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "primaryAddresses", r.primaryAddresses, "form", "csv")
	}
	if r.zoneTransferProtocol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zoneTransferProtocol", r.zoneTransferProtocol, "form", "")
	}
	if r.tsigKeyName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tsigKeyName", r.tsigKeyName, "form", "")
	}
	if r.ptrName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ptrName", r.ptrName, "form", "")
	}
	if r.newPtrName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newPtrName", r.newPtrName, "form", "")
	}
	if r.preference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preference", r.preference, "form", "")
	}
	if r.newPreference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newPreference", r.newPreference, "form", "")
	}
	if r.exchange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exchange", r.exchange, "form", "")
	}
	if r.newExchange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newExchange", r.newExchange, "form", "")
	}
	if r.text != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "form", "")
	}
	if r.newText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newText", r.newText, "form", "")
	}
	if r.splitText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "splitText", r.splitText, "form", "")
	}
	if r.newSplitText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newSplitText", r.newSplitText, "form", "")
	}
	if r.priority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priority", r.priority, "form", "")
	}
	if r.newPriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newPriority", r.newPriority, "form", "")
	}
	if r.weight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight", r.weight, "form", "")
	}
	if r.newWeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newWeight", r.newWeight, "form", "")
	}
	if r.port != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "port", r.port, "form", "")
	}
	if r.newPort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newPort", r.newPort, "form", "")
	}
	if r.target != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target", r.target, "form", "")
	}
	if r.newTarget != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newTarget", r.newTarget, "form", "")
	}
	if r.naptrOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrOrder", r.naptrOrder, "form", "")
	}
	if r.naptrNewOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrNewOrder", r.naptrNewOrder, "form", "")
	}
	if r.naptrPreference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrPreference", r.naptrPreference, "form", "")
	}
	if r.naptrNewPreference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrNewPreference", r.naptrNewPreference, "form", "")
	}
	if r.naptrFlags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrFlags", r.naptrFlags, "form", "")
	}
	if r.naptrNewFlags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrNewFlags", r.naptrNewFlags, "form", "")
	}
	if r.naptrServices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrServices", r.naptrServices, "form", "")
	}
	if r.naptrNewServices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrNewServices", r.naptrNewServices, "form", "")
	}
	if r.naptrRegexp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrRegexp", r.naptrRegexp, "form", "")
	}
	if r.naptrNewRegexp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrNewRegexp", r.naptrNewRegexp, "form", "")
	}
	if r.naptrReplacement != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrReplacement", r.naptrReplacement, "form", "")
	}
	if r.naptrNewReplacement != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "naptrNewReplacement", r.naptrNewReplacement, "form", "")
	}
	if r.dname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dname", r.dname, "form", "")
	}
	if r.keyTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyTag", r.keyTag, "form", "")
	}
	if r.newKeyTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newKeyTag", r.newKeyTag, "form", "")
	}
	if r.algorithm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "algorithm", r.algorithm, "form", "")
	}
	if r.newAlgorithm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newAlgorithm", r.newAlgorithm, "form", "")
	}
	if r.digestType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "digestType", r.digestType, "form", "")
	}
	if r.newDigestType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newDigestType", r.newDigestType, "form", "")
	}
	if r.digest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "digest", r.digest, "form", "")
	}
	if r.newDigest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newDigest", r.newDigest, "form", "")
	}
	if r.sshfpAlgorithm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sshfpAlgorithm", r.sshfpAlgorithm, "form", "")
	}
	if r.newSshfpAlgorithm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newSshfpAlgorithm", r.newSshfpAlgorithm, "form", "")
	}
	if r.sshfpFingerprintType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sshfpFingerprintType", r.sshfpFingerprintType, "form", "")
	}
	if r.newSshfpFingerprintType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newSshfpFingerprintType", r.newSshfpFingerprintType, "form", "")
	}
	if r.sshfpFingerprint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sshfpFingerprint", r.sshfpFingerprint, "form", "")
	}
	if r.newSshfpFingerprint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newSshfpFingerprint", r.newSshfpFingerprint, "form", "")
	}
	if r.tlsaCertificateUsage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tlsaCertificateUsage", r.tlsaCertificateUsage, "form", "")
	}
	if r.newTlsaCertificateUsage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newTlsaCertificateUsage", r.newTlsaCertificateUsage, "form", "")
	}
	if r.tlsaSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tlsaSelector", r.tlsaSelector, "form", "")
	}
	if r.newTlsaSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newTlsaSelector", r.newTlsaSelector, "form", "")
	}
	if r.tlsaMatchingType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tlsaMatchingType", r.tlsaMatchingType, "form", "")
	}
	if r.newTlsaMatchingType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newTlsaMatchingType", r.newTlsaMatchingType, "form", "")
	}
	if r.tlsaCertificateAssociationData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tlsaCertificateAssociationData", r.tlsaCertificateAssociationData, "form", "")
	}
	if r.newTlsaCertificateAssociationData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newTlsaCertificateAssociationData", r.newTlsaCertificateAssociationData, "form", "")
	}
	if r.svcPriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "svcPriority", r.svcPriority, "form", "")
	}
	if r.newSvcPriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newSvcPriority", r.newSvcPriority, "form", "")
	}
	if r.svcTargetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "svcTargetName", r.svcTargetName, "form", "")
	}
	if r.newSvcTargetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newSvcTargetName", r.newSvcTargetName, "form", "")
	}
	if r.svcParams != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "svcParams", r.svcParams, "form", "")
	}
	if r.newSvcParams != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newSvcParams", r.newSvcParams, "form", "")
	}
	if r.autoIpv4Hint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoIpv4Hint", r.autoIpv4Hint, "form", "")
	}
	if r.autoIpv6Hint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoIpv6Hint", r.autoIpv6Hint, "form", "")
	}
	if r.uriPriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uriPriority", r.uriPriority, "form", "")
	}
	if r.newUriPriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newUriPriority", r.newUriPriority, "form", "")
	}
	if r.uriWeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uriWeight", r.uriWeight, "form", "")
	}
	if r.newUriWeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newUriWeight", r.newUriWeight, "form", "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "form", "")
	}
	if r.newUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newUri", r.newUri, "form", "")
	}
	if r.flags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flags", r.flags, "form", "")
	}
	if r.newFlags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newFlags", r.newFlags, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.newTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newTag", r.newTag, "form", "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "form", "")
	}
	if r.newValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newValue", r.newValue, "form", "")
	}
	if r.aname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aname", r.aname, "form", "")
	}
	if r.newAName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newAName", r.newAName, "form", "")
	}
	if r.protocol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "protocol", r.protocol, "form", "")
	}
	if r.newProtocol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newProtocol", r.newProtocol, "form", "")
	}
	if r.forwarder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "forwarder", r.forwarder, "form", "")
	}
	if r.newForwarder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newForwarder", r.newForwarder, "form", "")
	}
	if r.dnssecValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dnssecValidation", r.dnssecValidation, "form", "")
	}
	if r.proxyType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proxyType", r.proxyType, "form", "")
	}
	if r.proxyAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proxyAddress", r.proxyAddress, "form", "")
	}
	if r.proxyPort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proxyPort", r.proxyPort, "form", "")
	}
	if r.proxyUsername != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proxyUsername", r.proxyUsername, "form", "")
	}
	if r.proxyPassword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proxyPassword", r.proxyPassword, "form", "")
	}
	if r.appName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appName", r.appName, "form", "")
	}
	if r.classPath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "classPath", r.classPath, "form", "")
	}
	if r.recordData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recordData", r.recordData, "form", "")
	}
	if r.rdata != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rdata", r.rdata, "form", "")
	}
	if r.newRData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newRData", r.newRData, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
