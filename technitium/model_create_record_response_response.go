/*
Technitium API

Go SDK for interacting with Technitium APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 12.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package technitium

import (
	"encoding/json"
)

// checks if the CreateRecordResponseResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRecordResponseResponse{}

// CreateRecordResponseResponse struct for CreateRecordResponseResponse
type CreateRecordResponseResponse struct {
	Zone *CreateRecordResponseResponseZone `json:"zone,omitempty"`
	AddedRecord *CreateRecordResponseResponseAddedRecord `json:"addedRecord,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateRecordResponseResponse CreateRecordResponseResponse

// NewCreateRecordResponseResponse instantiates a new CreateRecordResponseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRecordResponseResponse() *CreateRecordResponseResponse {
	this := CreateRecordResponseResponse{}
	return &this
}

// NewCreateRecordResponseResponseWithDefaults instantiates a new CreateRecordResponseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRecordResponseResponseWithDefaults() *CreateRecordResponseResponse {
	this := CreateRecordResponseResponse{}
	return &this
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *CreateRecordResponseResponse) GetZone() CreateRecordResponseResponseZone {
	if o == nil || IsNil(o.Zone) {
		var ret CreateRecordResponseResponseZone
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRecordResponseResponse) GetZoneOk() (*CreateRecordResponseResponseZone, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *CreateRecordResponseResponse) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given CreateRecordResponseResponseZone and assigns it to the Zone field.
func (o *CreateRecordResponseResponse) SetZone(v CreateRecordResponseResponseZone) {
	o.Zone = &v
}

// GetAddedRecord returns the AddedRecord field value if set, zero value otherwise.
func (o *CreateRecordResponseResponse) GetAddedRecord() CreateRecordResponseResponseAddedRecord {
	if o == nil || IsNil(o.AddedRecord) {
		var ret CreateRecordResponseResponseAddedRecord
		return ret
	}
	return *o.AddedRecord
}

// GetAddedRecordOk returns a tuple with the AddedRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRecordResponseResponse) GetAddedRecordOk() (*CreateRecordResponseResponseAddedRecord, bool) {
	if o == nil || IsNil(o.AddedRecord) {
		return nil, false
	}
	return o.AddedRecord, true
}

// HasAddedRecord returns a boolean if a field has been set.
func (o *CreateRecordResponseResponse) HasAddedRecord() bool {
	if o != nil && !IsNil(o.AddedRecord) {
		return true
	}

	return false
}

// SetAddedRecord gets a reference to the given CreateRecordResponseResponseAddedRecord and assigns it to the AddedRecord field.
func (o *CreateRecordResponseResponse) SetAddedRecord(v CreateRecordResponseResponseAddedRecord) {
	o.AddedRecord = &v
}

func (o CreateRecordResponseResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRecordResponseResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	if !IsNil(o.AddedRecord) {
		toSerialize["addedRecord"] = o.AddedRecord
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateRecordResponseResponse) UnmarshalJSON(data []byte) (err error) {
	varCreateRecordResponseResponse := _CreateRecordResponseResponse{}

	err = json.Unmarshal(data, &varCreateRecordResponseResponse)

	if err != nil {
		return err
	}

	*o = CreateRecordResponseResponse(varCreateRecordResponseResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "zone")
		delete(additionalProperties, "addedRecord")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateRecordResponseResponse struct {
	value *CreateRecordResponseResponse
	isSet bool
}

func (v NullableCreateRecordResponseResponse) Get() *CreateRecordResponseResponse {
	return v.value
}

func (v *NullableCreateRecordResponseResponse) Set(val *CreateRecordResponseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRecordResponseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRecordResponseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRecordResponseResponse(val *CreateRecordResponseResponse) *NullableCreateRecordResponseResponse {
	return &NullableCreateRecordResponseResponse{value: val, isSet: true}
}

func (v NullableCreateRecordResponseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRecordResponseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


